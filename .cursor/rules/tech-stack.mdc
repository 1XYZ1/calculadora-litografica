---
description: Technology stack overview with versions and best practices for Litografía Pro
alwaysApply: true
---

# Technology Stack - Litografía Pro

This document outlines the complete technology stack, versions, and best practices for the Litografía Pro quotation system.

## Core Stack Overview

**Frontend Framework:** React 18.2.0
**Build Tool:** Vite 5.0.8
**Styling:** Tailwind CSS 3.4.0
**Backend Services:** Firebase 10.7.1
**Storage:** AWS SDK S3 Client 3.901.0 (MinIO)

---

## Dependencies Analysis

### Production Dependencies

#### React & React DOM (^18.2.0)

- **Version:** 18.2.0
- **Purpose:** Core UI library with concurrent features
- **Best Practices:**
  - ✅ Use functional components with hooks exclusively
  - ✅ Leverage `useState`, `useEffect`, `useContext` for state management
  - ✅ React 18 enables automatic batching of state updates
  - ✅ Use `createContext` for cross-component state (FirebaseContext)
  - ⚠️ Avoid class components - entire codebase uses functional components
  - ⚠️ Be mindful of `useEffect` dependency arrays to prevent infinite loops

**Example Pattern (from FirebaseContext.jsx):**

```jsx
import React, { useState, useEffect, createContext, useContext } from "react";

const FirebaseContext = createContext(null);

export function FirebaseProvider({ children }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Effect logic with proper cleanup
    return () => cleanup();
  }, [dependencies]);

  return (
    <FirebaseContext.Provider value={{ user, loading }}>
      {children}
    </FirebaseContext.Provider>
  );
}

export const useFirebase = () => useContext(FirebaseContext);
```

#### Firebase (^10.7.1)

- **Version:** 10.7.1
- **Modules Used:**
  - `firebase/app` - Core initialization
  - `firebase/auth` - Google OAuth authentication
  - `firebase/firestore` - NoSQL database
- **Best Practices:**
  - ✅ Initialize Firebase once in context provider
  - ✅ Use environment variables for configuration (Vite import.meta.env)
  - ✅ Implement `onAuthStateChanged` listener for auth state persistence
  - ✅ Use modular imports (not compat mode)
  - ⚠️ Always handle auth errors with user-friendly messages
  - ⚠️ Use proper Firestore path structure: `/artifacts/{appId}/users/{userId}/`

**Firebase Configuration Pattern:**

```javascript
// config/firebase.js
export const getFirebaseConfig = () => {
  return {
    apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
    authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
    projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
    storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
    messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
    appId: import.meta.env.VITE_FIREBASE_APP_ID,
  };
};
```

**Authentication Pattern:**

```javascript
import { signInWithPopup, GoogleAuthProvider } from "firebase/auth";

const loginWithGoogle = async () => {
  const provider = new GoogleAuthProvider();
  try {
    const result = await signInWithPopup(auth, provider);
    return result.user;
  } catch (error) {
    // Handle specific error codes
    if (error.code === "auth/popup-closed-by-user") {
      // User-friendly error handling
    }
    throw error;
  }
};
```

#### AWS SDK S3 Client (^3.901.0)

- **Version:** 3.901.0
- **Purpose:** S3-compatible storage client for MinIO on Railway
- **Modules Used:** `@aws-sdk/client-s3` (S3Client, PutObjectCommand)
- **Best Practices:**
  - ✅ Use modular v3 SDK (smaller bundle size than v2)
  - ✅ Configure `forcePathStyle: true` for MinIO compatibility
  - ✅ Store credentials in environment variables
  - ✅ Convert Blob to Uint8Array for S3 upload
  - ✅ Include ContentType metadata for proper MIME handling
  - ⚠️ Always handle upload errors gracefully
  - ⚠️ Construct public URLs manually (MinIO doesn't auto-generate signed URLs)

**Storage Configuration Pattern:**

```javascript
import { S3Client, PutObjectCommand } from "@aws-sdk/client-s3";

export const getStorageClient = () => {
  return new S3Client({
    region: import.meta.env.VITE_STORAGE_REGION || "us-east-1",
    credentials: {
      accessKeyId: import.meta.env.VITE_STORAGE_ACCESS_KEY_ID,
      secretAccessKey: import.meta.env.VITE_STORAGE_SECRET_ACCESS_KEY,
    },
    endpoint: import.meta.env.VITE_STORAGE_ENDPOINT,
    forcePathStyle: true, // Required for MinIO
  });
};
```

**Upload Pattern:**

```javascript
const uploadPdfToStorage = async (pdfBlob, userId, pdfId) => {
  const arrayBuffer = await pdfBlob.arrayBuffer();
  const buffer = new Uint8Array(arrayBuffer);

  const command = new PutObjectCommand({
    Bucket: bucketName,
    Key: `quotations_pdf/${userId}/${pdfId}`,
    Body: buffer,
    ContentType: "application/pdf",
  });

  await client.send(command);
  return `${publicUrl}/${bucketName}/${key}`;
};
```

---

## Development Dependencies

### Build & Tooling

#### Vite (^5.0.8)

- **Version:** 5.0.8
- **Purpose:** Lightning-fast build tool and dev server
- **Best Practices:**
  - ✅ Use `import.meta.env` for environment variables (not `process.env`)
  - ✅ Prefix public env vars with `VITE_`
  - ✅ Leverage HMR (Hot Module Replacement) during development
  - ✅ Use `@vitejs/plugin-react` for React Fast Refresh
  - ⚠️ Environment variables are embedded at build time (not runtime)
  - ⚠️ Never expose secrets in `VITE_` prefixed variables (client-side accessible)

**Configuration Pattern (vite.config.js):**

```javascript
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  plugins: [react()],
  server: {
    port: 4000,
    open: true, // Auto-open browser
  },
});
```

#### @vitejs/plugin-react (^4.2.1)

- **Version:** 4.2.1
- **Purpose:** React Fast Refresh and JSX transformation
- **Best Practices:**
  - ✅ Automatically enabled in Vite config
  - ✅ Supports React 18 features out of the box
  - ✅ Preserves component state during HMR

### Styling

#### Tailwind CSS (^3.4.0)

- **Version:** 3.4.0
- **Purpose:** Utility-first CSS framework
- **Companion Tools:**
  - PostCSS ^8.4.32
  - Autoprefixer ^10.4.16
- **Best Practices:**
  - ✅ Use utility classes for rapid UI development
  - ✅ Extend theme in `tailwind.config.js` for custom values
  - ✅ Include all JSX/TSX files in content array
  - ✅ Use responsive modifiers (`sm:`, `md:`, `lg:`) for breakpoints
  - ✅ Leverage gradient utilities: `bg-gradient-to-br from-gray-50 to-gray-100`
  - ⚠️ Keep content array accurate to prevent purging used classes
  - ⚠️ Use consistent spacing scale (Tailwind's spacing system)

**Configuration Pattern (tailwind.config.js):**

```javascript
export default {
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {
      fontFamily: {
        inter: ["Inter", "sans-serif"],
      },
    },
  },
  plugins: [],
};
```

**Common Utility Patterns in Codebase:**

```jsx
// Layout
<div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">

// Spacing & Typography
<h1 className="text-2xl font-bold text-gray-800 mb-4">

// Interactive Elements
<button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">

// Grid & Flex
<div className="grid grid-cols-1 md:grid-cols-2 gap-4">
<div className="flex items-center justify-between">
```

#### PostCSS & Autoprefixer

- **Versions:** PostCSS ^8.4.32, Autoprefixer ^10.4.16
- **Purpose:** CSS processing and vendor prefix automation
- **Best Practices:**
  - ✅ Required for Tailwind CSS processing
  - ✅ Autoprefixer handles browser compatibility
  - ⚠️ Config must include both plugins for Tailwind to work

**Configuration Pattern (postcss.config.js):**

```javascript
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
```

---

## Environment Variables Structure

All environment variables must be prefixed with `VITE_` to be accessible in client code:

### Firebase Configuration

```env
VITE_FIREBASE_API_KEY=your_api_key
VITE_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com
VITE_FIREBASE_PROJECT_ID=your_project_id
VITE_FIREBASE_STORAGE_BUCKET=your_project.appspot.com
VITE_FIREBASE_MESSAGING_SENDER_ID=your_sender_id
VITE_FIREBASE_APP_ID=your_app_id
VITE_APP_ID=your_custom_app_id
```

### MinIO/S3 Storage Configuration

```env
VITE_STORAGE_REGION=us-east-1
VITE_STORAGE_ACCESS_KEY_ID=your_access_key
VITE_STORAGE_SECRET_ACCESS_KEY=your_secret_key
VITE_STORAGE_BUCKET_NAME=your_bucket_name
VITE_STORAGE_ENDPOINT=https://your-minio.railway.app
VITE_STORAGE_PUBLIC_URL=https://your-minio.railway.app
```

---

## Version Compatibility Notes

### React 18.2.0

- ✅ **Stable Release:** Production-ready with concurrent features
- ✅ **Automatic Batching:** Multiple state updates batched automatically
- ✅ **Transition API:** Available but not used in current codebase
- ⚠️ **Strict Mode:** Double-invokes effects in development (intentional)

### Vite 5.0.8

- ✅ **Modern Browsers:** Targets ES2015+ by default
- ✅ **Fast Builds:** Native ESM dev server, Rollup production builds
- ⚠️ **Import Paths:** Must use extensions for non-JS imports in some cases
- ⚠️ **Public Folder:** Files in `/public` served at root, not processed

### Firebase 10.7.1

- ✅ **Modular SDK:** Tree-shakeable, smaller bundle size
- ✅ **Auth Persistence:** Built-in with `indexedDB` by default
- ⚠️ **Breaking Changes from v9:** If upgrading, check migration guide
- ⚠️ **Bundle Size:** Import only needed modules to reduce size

### Tailwind CSS 3.4.0

- ✅ **JIT Mode:** Just-in-Time compilation enabled by default
- ✅ **Modern CSS:** Uses modern features with fallbacks
- ⚠️ **PurgeCSS:** Automatically removes unused classes in production
- ⚠️ **Dynamic Classes:** Avoid string concatenation for class names

### AWS SDK v3 (3.901.0)

- ✅ **Modular Design:** Import only needed clients/commands
- ✅ **Smaller Bundles:** ~70% smaller than v2
- ✅ **Modern JavaScript:** Uses Promises, async/await
- ⚠️ **Breaking Changes from v2:** Different API structure
- ⚠️ **MinIO Compatibility:** Requires `forcePathStyle: true`

---

## Architecture Patterns Used

### Component Structure

```
src/
├── components/        # Reusable UI components
│   ├── Header.jsx
│   ├── AuthModal.jsx
│   └── ...
├── pages/            # Page-level components
│   ├── Calculator.jsx
│   ├── PriceAdmin.jsx
│   └── SavedQuotations.jsx
├── context/          # React Context providers
│   └── FirebaseContext.jsx
├── config/           # Service configurations
│   ├── firebase.js
│   └── storage.js
└── utils/            # Helper functions
    ├── calculations.js
    └── constants.js
```

### State Management

- **Global State:** React Context API (FirebaseContext)
- **Local State:** useState hooks in components
- **Side Effects:** useEffect hooks with proper cleanup
- **No Redux/MobX:** Context API sufficient for app size

### Authentication Flow

1. User clicks login button
2. `signInWithPopup` opens Google OAuth popup
3. `onAuthStateChanged` listener updates global user state
4. User object persists in Firebase Auth session
5. All components access user via `useFirebase()` hook

### Data Flow

1. **Read:** Firestore → Context → Components
2. **Write:** Components → Firebase SDK → Firestore
3. **Auth:** Firebase Auth → Context → All components
4. **Storage:** Components → AWS SDK → MinIO → Public URL

---

## Performance Considerations

### Bundle Size Optimization

- ✅ Modular Firebase imports (only auth + firestore)
- ✅ Modular AWS SDK imports (only S3 client)
- ✅ Tailwind CSS purges unused styles
- ✅ Vite tree-shakes unused code
- ✅ React 18 lazy loading available (not currently used)

### Runtime Performance

- ✅ React 18 automatic batching reduces re-renders
- ✅ Context selectors via custom hooks prevent unnecessary updates
- ✅ Tailwind utilities avoid CSS-in-JS runtime cost
- ⚠️ Consider memo/useMemo for expensive calculations if needed

---

## Security Best Practices

### Firebase Security

- ✅ Use Firestore security rules (not shown in codebase)
- ✅ Auth state managed server-side by Firebase
- ✅ User data scoped by userId in Firestore paths
- ⚠️ Never expose Firebase Admin SDK credentials in client code

### Environment Variables

- ✅ All secrets in `.env` file (gitignored)
- ✅ Client-safe keys (Firebase public config) use `VITE_` prefix
- ⚠️ Never commit `.env` to version control
- ⚠️ Use separate Firebase projects for dev/staging/production

### MinIO Storage

- ✅ Access keys in environment variables
- ✅ User-scoped paths: `quotations_pdf/{userId}/{pdfId}`
- ⚠️ Configure bucket policies for public read if needed
- ⚠️ Consider signed URLs for private files (not implemented)

---

## Common Patterns & Anti-Patterns

### ✅ Good Patterns

```jsx
// 1. Centralized configuration
const config = getFirebaseConfig();
const app = initializeApp(config);

// 2. Custom hooks for context
export const useFirebase = () => useContext(FirebaseContext);

// 3. Error handling with user feedback
try {
  await loginWithGoogle();
} catch (error) {
  setAuthError(getErrorMessage(error.code));
}

// 4. Proper effect cleanup
useEffect(() => {
  const unsubscribe = onAuthStateChanged(auth, callback);
  return () => unsubscribe(); // Cleanup
}, [auth]);
```

### ❌ Anti-Patterns to Avoid

```jsx
// 1. DON'T use class components
class MyComponent extends React.Component {} // ❌

// 2. DON'T forget effect dependencies
useEffect(() => {
  fetchData(userId); // ❌ Missing userId in deps
}, []);

// 3. DON'T concatenate Tailwind classes dynamically
const buttonClass = `bg-${color}-500`; // ❌ Won't work with JIT

// 4. DON'T import entire Firebase SDK
import firebase from "firebase"; // ❌ Use modular imports

// 5. DON'T expose secrets in VITE_ variables
// ❌ Client-side accessible - only use for public keys
VITE_API_SECRET_KEY = secret123;
```

---

## Upgrade Path & Maintenance

### Regular Updates

- **React:** Patch updates safe, minor updates review breaking changes
- **Vite:** Usually backwards compatible, check migration guides
- **Firebase:** Follow modular SDK, avoid compat mode
- **Tailwind:** JIT mode stable, minor updates safe
- **AWS SDK:** Pin major version, test MinIO compatibility

### Version Pinning Strategy

- **Production Dependencies:** Use caret (`^`) for minor updates
- **Dev Dependencies:** Use caret (`^`) for tooling updates
- **Lock File:** Commit `package-lock.json` for reproducible builds

### Testing After Updates

1. Run `npm install` to update within semver ranges
2. Test authentication flow (Firebase)
3. Test PDF upload (AWS SDK + MinIO)
4. Verify build output (`npm run build`)
5. Check bundle size (`vite build --report`)

---

## Quick Reference Commands

```bash
# Development
npm run dev          # Start dev server on http://localhost:4000

# Production
npm run build        # Build for production (outputs to dist/)
npm run preview      # Preview production build locally

# Debugging
console.log(import.meta.env)  # Check environment variables
```

---

## Additional Dependencies to Consider

### Not Currently Used But Recommended

- **React Router** - For multi-page navigation (currently manual state switching)
- **jsPDF** - For PDF generation (likely used but not in package.json - check if needed)
- **html2canvas** - For PDF screenshot generation (likely used with jsPDF)
- **React Hook Form** - For complex form validation
- **Zod** - For runtime type validation
- **Vitest** - For unit testing (Vite-native)

### Libraries to Avoid

- **Moment.js** - Use native Date or date-fns (smaller)
- **Lodash** - Use native ES6+ or lodash-es (tree-shakeable)
- **jQuery** - Not needed with React
- **Firebase v8 (compat)** - Use v9+ modular SDK

---

## Summary

This application uses a modern, lightweight stack optimized for:

- **Fast Development:** Vite HMR, Tailwind utilities, React 18
- **Small Bundle Size:** Modular imports, tree-shaking, JIT CSS
- **Scalability:** Firebase backend, MinIO storage, context API
- **Maintainability:** Functional components, clear separation of concerns
- **Security:** Environment variables, Firebase Auth, user-scoped data

All dependencies are at stable, production-ready versions with no known critical vulnerabilities. The stack is well-suited for a quotation management system with document generation and cloud storage needs.
