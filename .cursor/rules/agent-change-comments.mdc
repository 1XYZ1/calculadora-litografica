---
description: Estándares para comentarios del agente después de realizar cambios en el código
alwaysApply: true
---

# Comentarios del Agente - Comunicación de Cambios

Esta regla establece cómo el agente debe comunicar los cambios realizados en el código al usuario.

## Principios de Comunicación

### 1. Brevedad y Precisión

- Comentarios concisos, máximo 3-4 líneas por cambio
- Ir directo al punto sin rodeos innecesarios
- Evitar jerga técnica compleja cuando hay alternativas claras
- No repetir información obvia del código

### 2. Estructura del Comentario

Cada comentario debe seguir este formato:

```
[Acción realizada] + [Motivo/Beneficio] + [Sugerencias de mejora]
```

### 3. Lenguaje Claro y Accesible

- Usar español simple y directo
- Evitar tecnicismos innecesarios
- Explicar conceptos complejos con analogías cuando sea posible
- Usar verbos en pasado simple ("Actualicé", "Modifiqué", "Agregué")

## Ejemplos de Comentarios

### ✅ BUENOS Comentarios

**Ejemplo 1: Actualización de componente**

```
Actualicé el componente Calculator para manejar estados de carga durante el
cálculo. Esto previene que el usuario haga múltiples clics mientras se procesa.

Sugerencias de mejora:
- Considerar agregar un indicador visual del progreso
- Implementar un timeout de 30 segundos para cálculos largos
```

**Ejemplo 2: Corrección de bug**

```
Corregí el error en calculatePrintingCost donde las dimensiones pequeñas
daban resultados negativos. Ahora se valida que el área sea mayor a 0.

Sugerencias de mejora:
- Agregar validación de dimensiones máximas permitidas
- Mostrar un mensaje de error específico cuando las dimensiones sean inválidas
```

**Ejemplo 3: Nueva funcionalidad**

```
Implementé la funcionalidad de duplicar cotizaciones existentes. Esto te permite
reutilizar cotizaciones anteriores como plantillas para nuevos trabajos.

Sugerencias de mejora:
- Agregar un campo de notas al duplicar para identificar la nueva cotización
- Permitir editar el nombre de la cotización duplicada antes de guardarla
```

**Ejemplo 4: Optimización**

```
Optimicé la carga de precios usando un listener en tiempo real. Los cambios de
precio ahora se reflejan automáticamente sin recargar la página.

Sugerencias de mejora:
- Agregar un indicador visual cuando los precios se actualicen
- Implementar caché local para reducir lecturas de Firestore
```

### ❌ MALOS Comentarios

**Ejemplo 1: Demasiado técnico**

```
❌ Refactoricé el hook useEffect implementando un cleanup callback para
desuscribir el onSnapshot listener y prevenir memory leaks causados por
closures que referencian el state obsoleto después del unmount del componente.

Sugerencias:
- Implementar React.memo para optimizar re-renders
- Considerar usar useReducer en lugar de múltiples useState
- Evaluar migración a Redux Toolkit para state management global
```

**Ejemplo 2: Demasiado vago**

```
❌ Hice unos cambios en el código para que funcione mejor.

Sugerencias:
- Mejorar el código
- Agregar más funcionalidades
```

**Ejemplo 3: Sin sugerencias**

```
❌ Actualicé el componente Header para incluir un menú desplegable con las
opciones de navegación. Ahora el usuario puede acceder a todas las páginas
desde cualquier lugar de la aplicación.
```

**Ejemplo 4: Demasiado extenso**

```
❌ Modifiqué completamente la estructura del componente Calculator. Primero,
separé la lógica de cálculo en funciones auxiliares ubicadas en utils/calculations.js
para mejor mantenibilidad. Luego, reorganicé el estado en varios useState hooks
en lugar de un objeto grande. Después, actualicé todos los event handlers para
usar las nuevas funciones. También añadí validaciones en cada paso del proceso
de cálculo para asegurar que los datos sean correctos antes de proceder. Por
último, mejoré los estilos con Tailwind CSS para que sea más responsive en
dispositivos móviles.

Sugerencias:
- Agregar tests unitarios
- Documentar las funciones
- Crear un archivo de constantes
- Implementar TypeScript
- Agregar ESLint
- Configurar Prettier
```

## Plantillas de Comentarios por Tipo de Cambio

### Nuevo Componente

```
Creé el componente [Nombre] que [función principal]. Esto [beneficio para el usuario].

Sugerencias de mejora:
- [Mejora relacionada con UX]
- [Mejora relacionada con funcionalidad adicional]
```

### Corrección de Bug

```
Corregí el error en [ubicación] donde [descripción del problema]. Ahora [comportamiento correcto].

Sugerencias de mejora:
- [Validación adicional para prevenir el bug]
- [Test para cubrir este caso]
```

### Refactorización

```
Reorganicé [componente/función] para [objetivo]. Esto hace el código [beneficio: más mantenible/legible/rápido].

Sugerencias de mejora:
- [Optimización adicional]
- [Separación de responsabilidades adicional]
```

### Nueva Funcionalidad

```
Implementé [funcionalidad] que permite [capacidad]. Esto te ayuda a [caso de uso].

Sugerencias de mejora:
- [Extensión natural de la funcionalidad]
- [Mejora de UX relacionada]
```

### Actualización de Configuración

```
Actualicé [archivo de configuración] para [cambio]. Esto [impacto en el sistema].

Sugerencias de mejora:
- [Configuración adicional relacionada]
- [Documentación de la configuración]
```

## Guía de Sugerencias de Mejora

### Características de Buenas Sugerencias

1. **Relevantes al cambio:** Directamente relacionadas con lo que se modificó
2. **Accionables:** El usuario puede implementarlas sin ambigüedad
3. **Progresivas:** Van más allá del cambio actual, agregan valor
4. **Específicas:** No son genéricas como "mejorar el código"
5. **Priorizadas:** De 1 a 3 sugerencias, las más importantes primero

### Categorías de Sugerencias

**UX/UI:**

- Feedback visual adicional
- Manejo de casos extremos
- Accesibilidad
- Responsive design

**Funcionalidad:**

- Extensiones naturales de la feature
- Casos de uso relacionados
- Automatizaciones

**Rendimiento:**

- Optimizaciones de carga
- Caché
- Lazy loading

**Mantenibilidad:**

- Tests
- Documentación
- Refactorizaciones
- Validaciones

**Seguridad:**

- Validaciones de entrada
- Manejo de errores
- Permisos y autorizaciones

## Ejemplos por Contexto

### Contexto: Cambio en UI/UX

```
Agregué animaciones de transición al cambiar entre páginas usando Tailwind CSS.
Esto hace que la navegación se sienta más fluida y profesional.

Sugerencias de mejora:
- Agregar una animación de carga esqueleto mientras se cargan los datos
- Implementar transiciones al mostrar/ocultar modales
```

### Contexto: Integración con API

```
Integré la API de MinIO para almacenar PDFs generados. Los archivos ahora se
guardan en la nube y están accesibles desde cualquier dispositivo.

Sugerencias de mejora:
- Implementar carga progresiva para archivos grandes (>5MB)
- Agregar botón para eliminar PDFs antiguos y liberar espacio
- Considerar compresión de PDFs antes de subir
```

### Contexto: Optimización de Rendimiento

```
Implementé caché local para los precios de materiales. Esto reduce las consultas
a Firestore en un 80% y acelera la carga de la calculadora.

Sugerencias de mejora:
- Agregar timestamp al caché para actualizarlo automáticamente después de 1 hora
- Mostrar un badge indicando cuando los precios provienen del caché
```

### Contexto: Manejo de Errores

```
Mejoré el manejo de errores en el proceso de autenticación. Ahora se muestran
mensajes claros según el tipo de error (popup cerrado, cuenta no autorizada, etc.).

Sugerencias de mejora:
- Agregar un botón de "Reintentar" en el mensaje de error
- Implementar un límite de intentos fallidos (3 máximo) para prevenir spam
```

## Checklist de Calidad de Comentarios

Antes de enviar un comentario, verificar:

- [ ] ¿Es conciso? (Máximo 3-4 líneas + sugerencias)
- [ ] ¿Usa lenguaje simple y claro?
- [ ] ¿Explica QUÉ se cambió y POR QUÉ?
- [ ] ¿Incluye entre 1 y 3 sugerencias?
- [ ] ¿Las sugerencias son específicas y accionables?
- [ ] ¿Las sugerencias están relacionadas con el cambio?
- [ ] ¿Evita tecnicismos innecesarios?
- [ ] ¿Está en español?

## Anti-Patrones a Evitar

### ❌ No Hacer

1. **Comentarios extremadamente técnicos sin contexto**

   ```
   ❌ Implementé un HOC con memoization para el re-rendering optimization
   ```

2. **Listar cada archivo modificado**

   ```
   ❌ Actualicé Header.jsx, App.jsx, firebase.js, Calculator.jsx y constants.js
   ```

3. **Sugerencias genéricas**

   ```
   ❌ Sugerencias:
   - Mejorar el código
   - Agregar tests
   - Documentar mejor
   ```

4. **Demasiadas sugerencias**

   ```
   ❌ Sugerencias: (lista de 10 items)
   ```

5. **Sin explicar el beneficio**
   ```
   ❌ Agregué una nueva función calculateDiscount()
   ```

### ✅ Hacer

1. **Explicar en términos del usuario**

   ```
   ✅ Implementé una optimización que reduce los tiempos de carga en un 50%
   ```

2. **Resumir el cambio principal**

   ```
   ✅ Reorganicé la estructura de archivos para mejor mantenibilidad
   ```

3. **Sugerencias específicas y priorizadas**

   ```
   ✅ Sugerencias:
   - Agregar validación de email en tiempo real mientras el usuario escribe
   - Implementar recordar sesión con checkbox "Mantenerme conectado"
   ```

4. **Máximo 3 sugerencias enfocadas**

   ```
   ✅ Sugerencias:
   - Agregar confirmación antes de eliminar cotizaciones
   - Permitir exportar cotizaciones a Excel
   ```

5. **Siempre incluir el beneficio**
   ```
   ✅ Agregué cálculo automático de descuentos por volumen. Esto te ahorra tiempo
   al cotizar pedidos grandes.
   ```

## Tono y Estilo

### Características del Tono

- **Profesional pero cercano:** Usar "tú" en lugar de "usted"
- **Positivo y constructivo:** Enfocarse en beneficios, no en problemas
- **Directo y claro:** Sin ambigüedades ni vaguedades
- **Educativo sin ser condescendiente:** Explicar sin subestimar al usuario

### Verbos Recomendados

**Para cambios:**

- Actualicé, Modifiqué, Mejoré, Optimicé, Corregí
- Implementé, Creé, Agregué, Integré
- Reorganicé, Refactoricé, Simplifiqué

**Para sugerencias:**

- Considerar, Agregar, Implementar, Incluir
- Mejorar (con especificidad), Extender, Ampliar
- Validar, Verificar, Prevenir

**Evitar:**

- Verbos pasivos: "Se implementó", "Fue modificado"
- Verbos técnicos sin contexto: "Refactoricé", "Abstraje"
- Verbos vagos: "Arreglé", "Cambié", "Actualicé algo"

## Ejemplos Completos de Sesiones

### Sesión 1: Implementación de Nueva Feature

**Cambio:** Agregar funcionalidad de exportar cotizaciones a PDF

**Comentario:**

```
Implementé la exportación de cotizaciones a PDF con diseño profesional incluido.
Ahora puedes descargar y compartir cotizaciones directamente con tus clientes.

Sugerencias de mejora:
- Agregar opción de personalizar el logo y colores de la empresa en el PDF
- Implementar envío automático del PDF por email
- Permitir previsualizar el PDF antes de descargarlo
```

### Sesión 2: Corrección de Bug Crítico

**Cambio:** Arreglar cálculo incorrecto de costos de plancha

**Comentario:**

```
Corregí el cálculo de costos de plancha que estaba duplicando el precio en
trabajos con múltiples colores. Ahora los totales son precisos.

Sugerencias de mejora:
- Agregar un desglose visual de costos por componente (papel, plancha, mano de obra)
- Implementar alertas cuando el costo calculado esté fuera del rango esperado
```

### Sesión 3: Refactorización de Código

**Cambio:** Separar lógica de cálculos en archivo independiente

**Comentario:**

```
Reorganicé el código de cálculos en un archivo separado (utils/calculations.js).
Esto facilita el mantenimiento y permite reutilizar las fórmulas en otros componentes.

Sugerencias de mejora:
- Agregar tests unitarios para cada función de cálculo
- Documentar las fórmulas con comentarios explicando los factores usados
```

## Resumen Ejecutivo

**Estructura obligatoria:**

1. **Línea 1:** Acción + Descripción breve (qué se hizo)
2. **Línea 2:** Beneficio o motivo (por qué es útil)
3. **Líneas 3-5:** De 1 a 3 sugerencias específicas y accionables

**Longitud máxima:** 4 líneas de texto + 3 sugerencias

**Lenguaje:** Español simple, directo, sin tecnicismos innecesarios

**Objetivo:** Que el usuario entienda rápidamente qué cambió, por qué es beneficioso,
y qué puede hacer para mejorarlo aún más.
